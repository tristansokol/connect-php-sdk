<?php
/**
 * V1PageCell
 *
 * PHP version 5
 *
 * @category Class
 * @package  SquareConnect
 * @author   Square Inc.
 * @license  Apache Licene v2 - http://www.apache.org/licenses/LICENSE-2.0
 * @link     https://squareup.com/developers
 */

/**
 * Square Connect API
 *
 * Client library for accessing the Square Connect APIs
 *
 * OpenAPI spec version: 3.0
 * Contact: developers@squareup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 *  Copyright 2016 Square, Inc.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace SquareConnect\Model;

use \ArrayAccess;

/**
 * V1PageCell Class Doc Comment
 *
 * @category    Class */
/**
 * @package     SquareConnect
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class V1PageCell implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'v1PageCell';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'page_id' => 'string',
        'row' => 'int',
        'column' => 'int',
        'object_type' => 'string[]',
        'object_id' => 'string',
        'placeholder_type' => 'string[]'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'page_id' => 'page_id',
        'row' => 'row',
        'column' => 'column',
        'object_type' => 'object_type',
        'object_id' => 'object_id',
        'placeholder_type' => 'placeholder_type'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'page_id' => 'setPageId',
        'row' => 'setRow',
        'column' => 'setColumn',
        'object_type' => 'setObjectType',
        'object_id' => 'setObjectId',
        'placeholder_type' => 'setPlaceholderType'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'page_id' => 'getPageId',
        'row' => 'getRow',
        'column' => 'getColumn',
        'object_type' => 'getObjectType',
        'object_id' => 'getObjectId',
        'placeholder_type' => 'getPlaceholderType'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const OBJECT_TYPE_ITEM = 'ITEM';
    const OBJECT_TYPE_DISCOUNT = 'DISCOUNT';
    const OBJECT_TYPE_CATEGORY = 'CATEGORY';
    const OBJECT_TYPE_PLACEHOLDER = 'PLACEHOLDER';
    const PLACEHOLDER_TYPE_ALL_ITEMS = 'ALL_ITEMS';
    const PLACEHOLDER_TYPE_DISCOUNTS_CATEGORY = 'DISCOUNTS_CATEGORY';
    const PLACEHOLDER_TYPE_REWARDS_FINDER = 'REWARDS_FINDER';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getObjectTypeAllowableValues()
    {
        return [
            self::OBJECT_TYPE_ITEM,
            self::OBJECT_TYPE_DISCOUNT,
            self::OBJECT_TYPE_CATEGORY,
            self::OBJECT_TYPE_PLACEHOLDER,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getPlaceholderTypeAllowableValues()
    {
        return [
            self::PLACEHOLDER_TYPE_ALL_ITEMS,
            self::PLACEHOLDER_TYPE_DISCOUNTS_CATEGORY,
            self::PLACEHOLDER_TYPE_REWARDS_FINDER,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['page_id'] = isset($data['page_id']) ? $data['page_id'] : null;
        $this->container['row'] = isset($data['row']) ? $data['row'] : null;
        $this->container['column'] = isset($data['column']) ? $data['column'] : null;
        $this->container['object_type'] = isset($data['object_type']) ? $data['object_type'] : null;
        $this->container['object_id'] = isset($data['object_id']) ? $data['object_id'] : null;
        $this->container['placeholder_type'] = isset($data['placeholder_type']) ? $data['placeholder_type'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        return true;
    }


    /**
     * Gets page_id
     * @return string
     */
    public function getPageId()
    {
        return $this->container['page_id'];
    }

    /**
     * Sets page_id
     * @param string $page_id The unique identifier of the page the cell is included on.
     * @return $this
     */
    public function setPageId($page_id)
    {
        $this->container['page_id'] = $page_id;

        return $this;
    }

    /**
     * Gets row
     * @return int
     */
    public function getRow()
    {
        return $this->container['row'];
    }

    /**
     * Sets row
     * @param int $row The row of the cell. Always an integer between 0 and 4, inclusive.
     * @return $this
     */
    public function setRow($row)
    {
        $this->container['row'] = $row;

        return $this;
    }

    /**
     * Gets column
     * @return int
     */
    public function getColumn()
    {
        return $this->container['column'];
    }

    /**
     * Sets column
     * @param int $column The column of the cell. Always an integer between 0 and 4, inclusive.
     * @return $this
     */
    public function setColumn($column)
    {
        $this->container['column'] = $column;

        return $this;
    }

    /**
     * Gets object_type
     * @return string[]
     */
    public function getObjectType()
    {
        return $this->container['object_type'];
    }

    /**
     * Sets object_type
     * @param string[] $object_type The type of entity represented in the cell (ITEM, DISCOUNT, CATEGORY, or PLACEHOLDER).
     * @return $this
     */
    public function setObjectType($object_type)
    {
        $allowed_values = array('ITEM', 'DISCOUNT', 'CATEGORY', 'PLACEHOLDER');
        if (!is_null($object_type) && (array_diff($object_type, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'object_type', must be one of 'ITEM', 'DISCOUNT', 'CATEGORY', 'PLACEHOLDER'");
        }
        $this->container['object_type'] = $object_type;

        return $this;
    }

    /**
     * Gets object_id
     * @return string
     */
    public function getObjectId()
    {
        return $this->container['object_id'];
    }

    /**
     * Sets object_id
     * @param string $object_id The unique identifier of the entity represented in the cell. Not present for cells with an object_type of PLACEHOLDER.
     * @return $this
     */
    public function setObjectId($object_id)
    {
        $this->container['object_id'] = $object_id;

        return $this;
    }

    /**
     * Gets placeholder_type
     * @return string[]
     */
    public function getPlaceholderType()
    {
        return $this->container['placeholder_type'];
    }

    /**
     * Sets placeholder_type
     * @param string[] $placeholder_type For a cell with an object_type of PLACEHOLDER, this value indicates the cell's special behavior.
     * @return $this
     */
    public function setPlaceholderType($placeholder_type)
    {
        $allowed_values = array('ALL_ITEMS', 'DISCOUNTS_CATEGORY', 'REWARDS_FINDER');
        if (!is_null($placeholder_type) && (array_diff($placeholder_type, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'placeholder_type', must be one of 'ALL_ITEMS', 'DISCOUNTS_CATEGORY', 'REWARDS_FINDER'");
        }
        $this->container['placeholder_type'] = $placeholder_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\SquareConnect\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\SquareConnect\ObjectSerializer::sanitizeForSerialization($this));
    }
}



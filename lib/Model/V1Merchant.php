<?php
/**
 * V1Merchant
 *
 * PHP version 5
 *
 * @category Class
 * @package  SquareConnect
 * @author   Square Inc.
 * @license  Apache Licene v2 - http://www.apache.org/licenses/LICENSE-2.0
 * @link     https://squareup.com/developers
 */

/**
 * Square Connect API
 *
 * Client library for accessing the Square Connect APIs
 *
 * OpenAPI spec version: 3.0
 * Contact: developers@squareup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 *  Copyright 2016 Square, Inc.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace SquareConnect\Model;

use \ArrayAccess;

/**
 * V1Merchant Class Doc Comment
 *
 * @category    Class */
 // @description Defines the fields that are included in the response body of a request to the **RetrieveBusiness** endpoint.
/**
 * @package     SquareConnect
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class V1Merchant implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'v1Merchant';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'errors' => '\SquareConnect\Model\Error[]',
        'id' => 'string',
        'name' => 'string',
        'email' => 'string',
        'account_type' => 'string',
        'account_capabilities' => 'string[]',
        'country_code' => 'string',
        'language_code' => 'string',
        'currency_code' => 'string',
        'business_name' => 'string',
        'business_address' => '\SquareConnect\Model\Address',
        'business_phone' => 'string',
        'business_type' => 'string',
        'shipping_address_' => '\SquareConnect\Model\Address',
        'location_details' => '\SquareConnect\Model\V1MerchantLocationDetails',
        'market_url' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'errors' => 'errors',
        'id' => 'id',
        'name' => 'name',
        'email' => 'email',
        'account_type' => 'account_type',
        'account_capabilities' => 'account_capabilities',
        'country_code' => 'country_code',
        'language_code' => 'language_code',
        'currency_code' => 'currency_code',
        'business_name' => 'business_name',
        'business_address' => 'business_address',
        'business_phone' => 'business_phone',
        'business_type' => 'business_type',
        'shipping_address_' => 'shipping_address ',
        'location_details' => 'location_details',
        'market_url' => 'market_url'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'errors' => 'setErrors',
        'id' => 'setId',
        'name' => 'setName',
        'email' => 'setEmail',
        'account_type' => 'setAccountType',
        'account_capabilities' => 'setAccountCapabilities',
        'country_code' => 'setCountryCode',
        'language_code' => 'setLanguageCode',
        'currency_code' => 'setCurrencyCode',
        'business_name' => 'setBusinessName',
        'business_address' => 'setBusinessAddress',
        'business_phone' => 'setBusinessPhone',
        'business_type' => 'setBusinessType',
        'shipping_address_' => 'setShippingAddress_',
        'location_details' => 'setLocationDetails',
        'market_url' => 'setMarketUrl'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'errors' => 'getErrors',
        'id' => 'getId',
        'name' => 'getName',
        'email' => 'getEmail',
        'account_type' => 'getAccountType',
        'account_capabilities' => 'getAccountCapabilities',
        'country_code' => 'getCountryCode',
        'language_code' => 'getLanguageCode',
        'currency_code' => 'getCurrencyCode',
        'business_name' => 'getBusinessName',
        'business_address' => 'getBusinessAddress',
        'business_phone' => 'getBusinessPhone',
        'business_type' => 'getBusinessType',
        'shipping_address_' => 'getShippingAddress_',
        'location_details' => 'getLocationDetails',
        'market_url' => 'getMarketUrl'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const ACCOUNT_TYPE_LOCATION = 'LOCATION';
    const ACCOUNT_TYPE_BUSINESS = 'BUSINESS';
    const ACCOUNT_CAPABILITIES_CREDIT_CARD_PROCESSING = 'CREDIT_CARD_PROCESSING';
    const ACCOUNT_CAPABILITIES_EMPLOYEE_MANAGEMENT = 'EMPLOYEE_MANAGEMENT';
    const ACCOUNT_CAPABILITIES_TIMECARD_MANAGEMENT = 'TIMECARD_MANAGEMENT';
    const BUSINESS_TYPE_ACCOUNTING = 'ACCOUNTING';
    const BUSINESS_TYPE_APPAREL_AND_ACCESSORY_SHOPS = 'APPAREL_AND_ACCESSORY_SHOPS';
    const BUSINESS_TYPE_ART_DEALERS_GALLERIES = 'ART_DEALERS_GALLERIES';
    const BUSINESS_TYPE_ART_DESIGN_AND_PHOTOGRAPHY = 'ART_DESIGN_AND_PHOTOGRAPHY';
    const BUSINESS_TYPE_BAR_CLUB_LOUNGE = 'BAR_CLUB_LOUNGE';
    const BUSINESS_TYPE_BEAUTY_AND_BARBER_SHOPS = 'BEAUTY_AND_BARBER_SHOPS';
    const BUSINESS_TYPE_BOOK_STORES = 'BOOK_STORES';
    const BUSINESS_TYPE_BUSINESS_SERVICES = 'BUSINESS_SERVICES';
    const BUSINESS_TYPE_CATERING = 'CATERING';
    const BUSINESS_TYPE_CHARITABLE_SOCIAL_SERVICE_ORGANIZATIONS = 'CHARITABLE_SOCIAL_SERVICE_ORGANIZATIONS';
    const BUSINESS_TYPE_CHARITIBLE_ORGS = 'CHARITIBLE_ORGS';
    const BUSINESS_TYPE_CLEANING_SERVICES = 'CLEANING_SERVICES';
    const BUSINESS_TYPE_COMPUTER_EQUIPMENT_SOFTWARE_MAINTENANCE_REPAIR_SERVICES = 'COMPUTER_EQUIPMENT_SOFTWARE_MAINTENANCE_REPAIR_SERVICES';
    const BUSINESS_TYPE_CONSULTANT = 'CONSULTANT';
    const BUSINESS_TYPE_CONTRACTORS = 'CONTRACTORS';
    const BUSINESS_TYPE_DELIVERY_SERVICES = 'DELIVERY_SERVICES';
    const BUSINESS_TYPE_DENTISTRY = 'DENTISTRY';
    const BUSINESS_TYPE_EDUCATION = 'EDUCATION';
    const BUSINESS_TYPE_FOOD_STORES_CONVENIENCE_STORES_AND_SPECIALTY_MARKETS = 'FOOD_STORES_CONVENIENCE_STORES_AND_SPECIALTY_MARKETS';
    const BUSINESS_TYPE_FOOD_TRUCK_CART = 'FOOD_TRUCK_CART';
    const BUSINESS_TYPE_FURNITURE_HOME_AND_OFFICE_EQUIPMENT = 'FURNITURE_HOME_AND_OFFICE_EQUIPMENT';
    const BUSINESS_TYPE_FURNITURE_HOME_GOODS = 'FURNITURE_HOME_GOODS';
    const BUSINESS_TYPE_HOTELS_AND_LODGING = 'HOTELS_AND_LODGING';
    const BUSINESS_TYPE_INDIVIDUAL_USE = 'INDIVIDUAL_USE';
    const BUSINESS_TYPE_JEWELRY_AND_WATCHES = 'JEWELRY_AND_WATCHES';
    const BUSINESS_TYPE_LANDSCAPING_AND_HORTICULTURAL_SERVICES = 'LANDSCAPING_AND_HORTICULTURAL_SERVICES';
    const BUSINESS_TYPE_LANGUAGE_SCHOOLS = 'LANGUAGE_SCHOOLS';
    const BUSINESS_TYPE_LEGAL_SERVICES = 'LEGAL_SERVICES';
    const BUSINESS_TYPE_MEDICAL_PRACTITIONERS = 'MEDICAL_PRACTITIONERS';
    const BUSINESS_TYPE_MEDICAL_SERVICES_AND_HEALTH_PRACTITIONERS = 'MEDICAL_SERVICES_AND_HEALTH_PRACTITIONERS';
    const BUSINESS_TYPE_MEMBERSHIP_ORGANIZATIONS = 'MEMBERSHIP_ORGANIZATIONS';
    const BUSINESS_TYPE_MUSIC_AND_ENTERTAINMENT = 'MUSIC_AND_ENTERTAINMENT';
    const BUSINESS_TYPE_OTHER = 'OTHER';
    const BUSINESS_TYPE_OUTDOOR_MARKETS = 'OUTDOOR_MARKETS';
    const BUSINESS_TYPE_PERSONAL_SERVICES = 'PERSONAL_SERVICES';
    const BUSINESS_TYPE_POLITICAL_ORGANIZATIONS = 'POLITICAL_ORGANIZATIONS';
    const BUSINESS_TYPE_PROFESSIONAL_SERVICES = 'PROFESSIONAL_SERVICES';
    const BUSINESS_TYPE_REAL_ESTATE = 'REAL_ESTATE';
    const BUSINESS_TYPE_RECREATION_SERVICES = 'RECREATION_SERVICES';
    const BUSINESS_TYPE_REPAIR_SHOPS_AND_RELATED_SERVICES = 'REPAIR_SHOPS_AND_RELATED_SERVICES';
    const BUSINESS_TYPE_RESTAURANTS = 'RESTAURANTS';
    const BUSINESS_TYPE_RETAIL_SHOPS = 'RETAIL_SHOPS';
    const BUSINESS_TYPE_SCHOOLS_AND_EDUCATIONAL_SERVICES = 'SCHOOLS_AND_EDUCATIONAL_SERVICES';
    const BUSINESS_TYPE_SPORTING_GOODS = 'SPORTING_GOODS';
    const BUSINESS_TYPE_TAXICABS_AND_LIMOUSINES = 'TAXICABS_AND_LIMOUSINES';
    const BUSINESS_TYPE_TICKET_SALES = 'TICKET_SALES';
    const BUSINESS_TYPE_TOURISM = 'TOURISM';
    const BUSINESS_TYPE_TRAVEL_TOURISM = 'TRAVEL_TOURISM';
    const BUSINESS_TYPE_VETERINARY_SERVICES = 'VETERINARY_SERVICES';
    const BUSINESS_TYPE_WEB_DEV_DESIGN = 'WEB_DEV_DESIGN';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getAccountTypeAllowableValues()
    {
        return [
            self::ACCOUNT_TYPE_LOCATION,
            self::ACCOUNT_TYPE_BUSINESS,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getAccountCapabilitiesAllowableValues()
    {
        return [
            self::ACCOUNT_CAPABILITIES_CREDIT_CARD_PROCESSING,
            self::ACCOUNT_CAPABILITIES_EMPLOYEE_MANAGEMENT,
            self::ACCOUNT_CAPABILITIES_TIMECARD_MANAGEMENT,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getBusinessTypeAllowableValues()
    {
        return [
            self::BUSINESS_TYPE_ACCOUNTING,
            self::BUSINESS_TYPE_APPAREL_AND_ACCESSORY_SHOPS,
            self::BUSINESS_TYPE_ART_DEALERS_GALLERIES,
            self::BUSINESS_TYPE_ART_DESIGN_AND_PHOTOGRAPHY,
            self::BUSINESS_TYPE_BAR_CLUB_LOUNGE,
            self::BUSINESS_TYPE_BEAUTY_AND_BARBER_SHOPS,
            self::BUSINESS_TYPE_BOOK_STORES,
            self::BUSINESS_TYPE_BUSINESS_SERVICES,
            self::BUSINESS_TYPE_CATERING,
            self::BUSINESS_TYPE_CHARITABLE_SOCIAL_SERVICE_ORGANIZATIONS,
            self::BUSINESS_TYPE_CHARITIBLE_ORGS,
            self::BUSINESS_TYPE_CLEANING_SERVICES,
            self::BUSINESS_TYPE_COMPUTER_EQUIPMENT_SOFTWARE_MAINTENANCE_REPAIR_SERVICES,
            self::BUSINESS_TYPE_CONSULTANT,
            self::BUSINESS_TYPE_CONTRACTORS,
            self::BUSINESS_TYPE_DELIVERY_SERVICES,
            self::BUSINESS_TYPE_DENTISTRY,
            self::BUSINESS_TYPE_EDUCATION,
            self::BUSINESS_TYPE_FOOD_STORES_CONVENIENCE_STORES_AND_SPECIALTY_MARKETS,
            self::BUSINESS_TYPE_FOOD_TRUCK_CART,
            self::BUSINESS_TYPE_FURNITURE_HOME_AND_OFFICE_EQUIPMENT,
            self::BUSINESS_TYPE_FURNITURE_HOME_GOODS,
            self::BUSINESS_TYPE_HOTELS_AND_LODGING,
            self::BUSINESS_TYPE_INDIVIDUAL_USE,
            self::BUSINESS_TYPE_JEWELRY_AND_WATCHES,
            self::BUSINESS_TYPE_LANDSCAPING_AND_HORTICULTURAL_SERVICES,
            self::BUSINESS_TYPE_LANGUAGE_SCHOOLS,
            self::BUSINESS_TYPE_LEGAL_SERVICES,
            self::BUSINESS_TYPE_MEDICAL_PRACTITIONERS,
            self::BUSINESS_TYPE_MEDICAL_SERVICES_AND_HEALTH_PRACTITIONERS,
            self::BUSINESS_TYPE_MEMBERSHIP_ORGANIZATIONS,
            self::BUSINESS_TYPE_MUSIC_AND_ENTERTAINMENT,
            self::BUSINESS_TYPE_OTHER,
            self::BUSINESS_TYPE_OUTDOOR_MARKETS,
            self::BUSINESS_TYPE_PERSONAL_SERVICES,
            self::BUSINESS_TYPE_POLITICAL_ORGANIZATIONS,
            self::BUSINESS_TYPE_PROFESSIONAL_SERVICES,
            self::BUSINESS_TYPE_REAL_ESTATE,
            self::BUSINESS_TYPE_RECREATION_SERVICES,
            self::BUSINESS_TYPE_REPAIR_SHOPS_AND_RELATED_SERVICES,
            self::BUSINESS_TYPE_RESTAURANTS,
            self::BUSINESS_TYPE_RETAIL_SHOPS,
            self::BUSINESS_TYPE_SCHOOLS_AND_EDUCATIONAL_SERVICES,
            self::BUSINESS_TYPE_SPORTING_GOODS,
            self::BUSINESS_TYPE_TAXICABS_AND_LIMOUSINES,
            self::BUSINESS_TYPE_TICKET_SALES,
            self::BUSINESS_TYPE_TOURISM,
            self::BUSINESS_TYPE_TRAVEL_TOURISM,
            self::BUSINESS_TYPE_VETERINARY_SERVICES,
            self::BUSINESS_TYPE_WEB_DEV_DESIGN,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['errors'] = isset($data['errors']) ? $data['errors'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['account_type'] = isset($data['account_type']) ? $data['account_type'] : null;
        $this->container['account_capabilities'] = isset($data['account_capabilities']) ? $data['account_capabilities'] : null;
        $this->container['country_code'] = isset($data['country_code']) ? $data['country_code'] : null;
        $this->container['language_code'] = isset($data['language_code']) ? $data['language_code'] : null;
        $this->container['currency_code'] = isset($data['currency_code']) ? $data['currency_code'] : null;
        $this->container['business_name'] = isset($data['business_name']) ? $data['business_name'] : null;
        $this->container['business_address'] = isset($data['business_address']) ? $data['business_address'] : null;
        $this->container['business_phone'] = isset($data['business_phone']) ? $data['business_phone'] : null;
        $this->container['business_type'] = isset($data['business_type']) ? $data['business_type'] : null;
        $this->container['shipping_address_'] = isset($data['shipping_address_']) ? $data['shipping_address_'] : null;
        $this->container['location_details'] = isset($data['location_details']) ? $data['location_details'] : null;
        $this->container['market_url'] = isset($data['market_url']) ? $data['market_url'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        $allowed_values = ["LOCATION", "BUSINESS"];
        if (!in_array($this->container['account_type'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'account_type', must be one of #{allowed_values}.";
        }

        $allowed_values = ["ACCOUNTING", "APPAREL_AND_ACCESSORY_SHOPS", "ART_DEALERS_GALLERIES", "ART_DESIGN_AND_PHOTOGRAPHY", "BAR_CLUB_LOUNGE", "BEAUTY_AND_BARBER_SHOPS", "BOOK_STORES", "BUSINESS_SERVICES", "CATERING", "CHARITABLE_SOCIAL_SERVICE_ORGANIZATIONS", "CHARITIBLE_ORGS", "CLEANING_SERVICES", "COMPUTER_EQUIPMENT_SOFTWARE_MAINTENANCE_REPAIR_SERVICES", "CONSULTANT", "CONTRACTORS", "DELIVERY_SERVICES", "DENTISTRY", "EDUCATION", "FOOD_STORES_CONVENIENCE_STORES_AND_SPECIALTY_MARKETS", "FOOD_TRUCK_CART", "FURNITURE_HOME_AND_OFFICE_EQUIPMENT", "FURNITURE_HOME_GOODS", "HOTELS_AND_LODGING", "INDIVIDUAL_USE", "JEWELRY_AND_WATCHES", "LANDSCAPING_AND_HORTICULTURAL_SERVICES", "LANGUAGE_SCHOOLS", "LEGAL_SERVICES", "MEDICAL_PRACTITIONERS", "MEDICAL_SERVICES_AND_HEALTH_PRACTITIONERS", "MEMBERSHIP_ORGANIZATIONS", "MUSIC_AND_ENTERTAINMENT", "OTHER", "OUTDOOR_MARKETS", "PERSONAL_SERVICES", "POLITICAL_ORGANIZATIONS", "PROFESSIONAL_SERVICES", "REAL_ESTATE", "RECREATION_SERVICES", "REPAIR_SHOPS_AND_RELATED_SERVICES", "RESTAURANTS", "RETAIL_SHOPS", "SCHOOLS_AND_EDUCATIONAL_SERVICES", "SPORTING_GOODS", "TAXICABS_AND_LIMOUSINES", "TICKET_SALES", "TOURISM", "TRAVEL_TOURISM", "VETERINARY_SERVICES", "WEB_DEV_DESIGN"];
        if (!in_array($this->container['business_type'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'business_type', must be one of #{allowed_values}.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        $allowed_values = ["LOCATION", "BUSINESS"];
        if (!in_array($this->container['account_type'], $allowed_values)) {
            return false;
        }
        $allowed_values = ["ACCOUNTING", "APPAREL_AND_ACCESSORY_SHOPS", "ART_DEALERS_GALLERIES", "ART_DESIGN_AND_PHOTOGRAPHY", "BAR_CLUB_LOUNGE", "BEAUTY_AND_BARBER_SHOPS", "BOOK_STORES", "BUSINESS_SERVICES", "CATERING", "CHARITABLE_SOCIAL_SERVICE_ORGANIZATIONS", "CHARITIBLE_ORGS", "CLEANING_SERVICES", "COMPUTER_EQUIPMENT_SOFTWARE_MAINTENANCE_REPAIR_SERVICES", "CONSULTANT", "CONTRACTORS", "DELIVERY_SERVICES", "DENTISTRY", "EDUCATION", "FOOD_STORES_CONVENIENCE_STORES_AND_SPECIALTY_MARKETS", "FOOD_TRUCK_CART", "FURNITURE_HOME_AND_OFFICE_EQUIPMENT", "FURNITURE_HOME_GOODS", "HOTELS_AND_LODGING", "INDIVIDUAL_USE", "JEWELRY_AND_WATCHES", "LANDSCAPING_AND_HORTICULTURAL_SERVICES", "LANGUAGE_SCHOOLS", "LEGAL_SERVICES", "MEDICAL_PRACTITIONERS", "MEDICAL_SERVICES_AND_HEALTH_PRACTITIONERS", "MEMBERSHIP_ORGANIZATIONS", "MUSIC_AND_ENTERTAINMENT", "OTHER", "OUTDOOR_MARKETS", "PERSONAL_SERVICES", "POLITICAL_ORGANIZATIONS", "PROFESSIONAL_SERVICES", "REAL_ESTATE", "RECREATION_SERVICES", "REPAIR_SHOPS_AND_RELATED_SERVICES", "RESTAURANTS", "RETAIL_SHOPS", "SCHOOLS_AND_EDUCATIONAL_SERVICES", "SPORTING_GOODS", "TAXICABS_AND_LIMOUSINES", "TICKET_SALES", "TOURISM", "TRAVEL_TOURISM", "VETERINARY_SERVICES", "WEB_DEV_DESIGN"];
        if (!in_array($this->container['business_type'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets errors
     * @return \SquareConnect\Model\Error[]
     */
    public function getErrors()
    {
        return $this->container['errors'];
    }

    /**
     * Sets errors
     * @param \SquareConnect\Model\Error[] $errors Any errors that occurred during the request.
     * @return $this
     */
    public function setErrors($errors)
    {
        $this->container['errors'] = $errors;

        return $this;
    }

    /**
     * Gets id
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param string $id The merchant account's unique identifier.
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     * @param string $name The name associated with the merchant account.
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets email
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     * @param string $email The email address associated with the merchant account.
     * @return $this
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets account_type
     * @return string
     */
    public function getAccountType()
    {
        return $this->container['account_type'];
    }

    /**
     * Sets account_type
     * @param string $account_type Indicates whether the merchant account corresponds to a single-location account (LOCATION) or a business account (BUSINESS). This value is almost always LOCATION.
     * @return $this
     */
    public function setAccountType($account_type)
    {
        $allowed_values = array('LOCATION', 'BUSINESS');
        if (!is_null($account_type) && (!in_array($account_type, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'account_type', must be one of 'LOCATION', 'BUSINESS'");
        }
        $this->container['account_type'] = $account_type;

        return $this;
    }

    /**
     * Gets account_capabilities
     * @return string[]
     */
    public function getAccountCapabilities()
    {
        return $this->container['account_capabilities'];
    }

    /**
     * Sets account_capabilities
     * @param string[] $account_capabilities Capabilities that are enabled for the merchant's Square account. Capabilities that are not listed in this array are not enabled for the account.
     * @return $this
     */
    public function setAccountCapabilities($account_capabilities)
    {
        $allowed_values = array('CREDIT_CARD_PROCESSING', 'EMPLOYEE_MANAGEMENT', 'TIMECARD_MANAGEMENT');
        if (!is_null($account_capabilities) && (array_diff($account_capabilities, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'account_capabilities', must be one of 'CREDIT_CARD_PROCESSING', 'EMPLOYEE_MANAGEMENT', 'TIMECARD_MANAGEMENT'");
        }
        $this->container['account_capabilities'] = $account_capabilities;

        return $this;
    }

    /**
     * Gets country_code
     * @return string
     */
    public function getCountryCode()
    {
        return $this->container['country_code'];
    }

    /**
     * Sets country_code
     * @param string $country_code The country associated with the merchant account, in ISO 3166-1-alpha-2 format.
     * @return $this
     */
    public function setCountryCode($country_code)
    {
        $this->container['country_code'] = $country_code;

        return $this;
    }

    /**
     * Gets language_code
     * @return string
     */
    public function getLanguageCode()
    {
        return $this->container['language_code'];
    }

    /**
     * Sets language_code
     * @param string $language_code The language associated with the merchant account, in BCP 47 format.
     * @return $this
     */
    public function setLanguageCode($language_code)
    {
        $this->container['language_code'] = $language_code;

        return $this;
    }

    /**
     * Gets currency_code
     * @return string
     */
    public function getCurrencyCode()
    {
        return $this->container['currency_code'];
    }

    /**
     * Sets currency_code
     * @param string $currency_code The currency associated with the merchant account, in ISO 4217 format. For example, the currency code for US dollars is USD.
     * @return $this
     */
    public function setCurrencyCode($currency_code)
    {
        $this->container['currency_code'] = $currency_code;

        return $this;
    }

    /**
     * Gets business_name
     * @return string
     */
    public function getBusinessName()
    {
        return $this->container['business_name'];
    }

    /**
     * Sets business_name
     * @param string $business_name The name of the merchant's business.
     * @return $this
     */
    public function setBusinessName($business_name)
    {
        $this->container['business_name'] = $business_name;

        return $this;
    }

    /**
     * Gets business_address
     * @return \SquareConnect\Model\Address
     */
    public function getBusinessAddress()
    {
        return $this->container['business_address'];
    }

    /**
     * Sets business_address
     * @param \SquareConnect\Model\Address $business_address The address of the merchant's business.
     * @return $this
     */
    public function setBusinessAddress($business_address)
    {
        $this->container['business_address'] = $business_address;

        return $this;
    }

    /**
     * Gets business_phone
     * @return string
     */
    public function getBusinessPhone()
    {
        return $this->container['business_phone'];
    }

    /**
     * Sets business_phone
     * @param string $business_phone The phone number of the merchant's business.
     * @return $this
     */
    public function setBusinessPhone($business_phone)
    {
        $this->container['business_phone'] = $business_phone;

        return $this;
    }

    /**
     * Gets business_type
     * @return string
     */
    public function getBusinessType()
    {
        return $this->container['business_type'];
    }

    /**
     * Sets business_type
     * @param string $business_type The type of business operated by the merchant.
     * @return $this
     */
    public function setBusinessType($business_type)
    {
        $allowed_values = array('ACCOUNTING', 'APPAREL_AND_ACCESSORY_SHOPS', 'ART_DEALERS_GALLERIES', 'ART_DESIGN_AND_PHOTOGRAPHY', 'BAR_CLUB_LOUNGE', 'BEAUTY_AND_BARBER_SHOPS', 'BOOK_STORES', 'BUSINESS_SERVICES', 'CATERING', 'CHARITABLE_SOCIAL_SERVICE_ORGANIZATIONS', 'CHARITIBLE_ORGS', 'CLEANING_SERVICES', 'COMPUTER_EQUIPMENT_SOFTWARE_MAINTENANCE_REPAIR_SERVICES', 'CONSULTANT', 'CONTRACTORS', 'DELIVERY_SERVICES', 'DENTISTRY', 'EDUCATION', 'FOOD_STORES_CONVENIENCE_STORES_AND_SPECIALTY_MARKETS', 'FOOD_TRUCK_CART', 'FURNITURE_HOME_AND_OFFICE_EQUIPMENT', 'FURNITURE_HOME_GOODS', 'HOTELS_AND_LODGING', 'INDIVIDUAL_USE', 'JEWELRY_AND_WATCHES', 'LANDSCAPING_AND_HORTICULTURAL_SERVICES', 'LANGUAGE_SCHOOLS', 'LEGAL_SERVICES', 'MEDICAL_PRACTITIONERS', 'MEDICAL_SERVICES_AND_HEALTH_PRACTITIONERS', 'MEMBERSHIP_ORGANIZATIONS', 'MUSIC_AND_ENTERTAINMENT', 'OTHER', 'OUTDOOR_MARKETS', 'PERSONAL_SERVICES', 'POLITICAL_ORGANIZATIONS', 'PROFESSIONAL_SERVICES', 'REAL_ESTATE', 'RECREATION_SERVICES', 'REPAIR_SHOPS_AND_RELATED_SERVICES', 'RESTAURANTS', 'RETAIL_SHOPS', 'SCHOOLS_AND_EDUCATIONAL_SERVICES', 'SPORTING_GOODS', 'TAXICABS_AND_LIMOUSINES', 'TICKET_SALES', 'TOURISM', 'TRAVEL_TOURISM', 'VETERINARY_SERVICES', 'WEB_DEV_DESIGN');
        if (!is_null($business_type) && (!in_array($business_type, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'business_type', must be one of 'ACCOUNTING', 'APPAREL_AND_ACCESSORY_SHOPS', 'ART_DEALERS_GALLERIES', 'ART_DESIGN_AND_PHOTOGRAPHY', 'BAR_CLUB_LOUNGE', 'BEAUTY_AND_BARBER_SHOPS', 'BOOK_STORES', 'BUSINESS_SERVICES', 'CATERING', 'CHARITABLE_SOCIAL_SERVICE_ORGANIZATIONS', 'CHARITIBLE_ORGS', 'CLEANING_SERVICES', 'COMPUTER_EQUIPMENT_SOFTWARE_MAINTENANCE_REPAIR_SERVICES', 'CONSULTANT', 'CONTRACTORS', 'DELIVERY_SERVICES', 'DENTISTRY', 'EDUCATION', 'FOOD_STORES_CONVENIENCE_STORES_AND_SPECIALTY_MARKETS', 'FOOD_TRUCK_CART', 'FURNITURE_HOME_AND_OFFICE_EQUIPMENT', 'FURNITURE_HOME_GOODS', 'HOTELS_AND_LODGING', 'INDIVIDUAL_USE', 'JEWELRY_AND_WATCHES', 'LANDSCAPING_AND_HORTICULTURAL_SERVICES', 'LANGUAGE_SCHOOLS', 'LEGAL_SERVICES', 'MEDICAL_PRACTITIONERS', 'MEDICAL_SERVICES_AND_HEALTH_PRACTITIONERS', 'MEMBERSHIP_ORGANIZATIONS', 'MUSIC_AND_ENTERTAINMENT', 'OTHER', 'OUTDOOR_MARKETS', 'PERSONAL_SERVICES', 'POLITICAL_ORGANIZATIONS', 'PROFESSIONAL_SERVICES', 'REAL_ESTATE', 'RECREATION_SERVICES', 'REPAIR_SHOPS_AND_RELATED_SERVICES', 'RESTAURANTS', 'RETAIL_SHOPS', 'SCHOOLS_AND_EDUCATIONAL_SERVICES', 'SPORTING_GOODS', 'TAXICABS_AND_LIMOUSINES', 'TICKET_SALES', 'TOURISM', 'TRAVEL_TOURISM', 'VETERINARY_SERVICES', 'WEB_DEV_DESIGN'");
        }
        $this->container['business_type'] = $business_type;

        return $this;
    }

    /**
     * Gets shipping_address_
     * @return \SquareConnect\Model\Address
     */
    public function getShippingAddress_()
    {
        return $this->container['shipping_address_'];
    }

    /**
     * Sets shipping_address_
     * @param \SquareConnect\Model\Address $shipping_address_ The merchant's shipping address.
     * @return $this
     */
    public function setShippingAddress_($shipping_address_)
    {
        $this->container['shipping_address_'] = $shipping_address_;

        return $this;
    }

    /**
     * Gets location_details
     * @return \SquareConnect\Model\V1MerchantLocationDetails
     */
    public function getLocationDetails()
    {
        return $this->container['location_details'];
    }

    /**
     * Sets location_details
     * @param \SquareConnect\Model\V1MerchantLocationDetails $location_details
     * @return $this
     */
    public function setLocationDetails($location_details)
    {
        $this->container['location_details'] = $location_details;

        return $this;
    }

    /**
     * Gets market_url
     * @return string
     */
    public function getMarketUrl()
    {
        return $this->container['market_url'];
    }

    /**
     * Sets market_url
     * @param string $market_url The URL of the merchant's online store.
     * @return $this
     */
    public function setMarketUrl($market_url)
    {
        $this->container['market_url'] = $market_url;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\SquareConnect\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\SquareConnect\ObjectSerializer::sanitizeForSerialization($this));
    }
}



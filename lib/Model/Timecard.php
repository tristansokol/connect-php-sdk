<?php
/**
 * Timecard
 *
 * PHP version 5
 *
 * @category Class
 * @package  SquareConnect
 * @author   Square Inc.
 * @license  Apache Licene v2 - http://www.apache.org/licenses/LICENSE-2.0
 * @link     https://squareup.com/developers
 */

/**
 * Square Connect API
 *
 * Client library for accessing the Square Connect APIs
 *
 * OpenAPI spec version: 3.0
 * Contact: developers@squareup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 *  Copyright 2016 Square, Inc.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace SquareConnect\Model;

use \ArrayAccess;

/**
 * Timecard Class Doc Comment
 *
 * @category    Class */
 // @description Represents a timecard for an employee.
/**
 * @package     SquareConnect
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Timecard implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Timecard';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'employee_id' => 'string',
        'deleted' => 'bool',
        'clockin_time' => 'string',
        'clockout_time' => 'string',
        'clockin_location_id' => 'string',
        'clockout_location_id' => 'string',
        'created_at' => 'string',
        'updated_at' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'employee_id' => 'employee_id',
        'deleted' => 'deleted',
        'clockin_time' => 'clockin_time',
        'clockout_time' => 'clockout_time',
        'clockin_location_id' => 'clockin_location_id',
        'clockout_location_id' => 'clockout_location_id',
        'created_at' => 'created_at',
        'updated_at' => 'updated_at'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'employee_id' => 'setEmployeeId',
        'deleted' => 'setDeleted',
        'clockin_time' => 'setClockinTime',
        'clockout_time' => 'setClockoutTime',
        'clockin_location_id' => 'setClockinLocationId',
        'clockout_location_id' => 'setClockoutLocationId',
        'created_at' => 'setCreatedAt',
        'updated_at' => 'setUpdatedAt'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'employee_id' => 'getEmployeeId',
        'deleted' => 'getDeleted',
        'clockin_time' => 'getClockinTime',
        'clockout_time' => 'getClockoutTime',
        'clockin_location_id' => 'getClockinLocationId',
        'clockout_location_id' => 'getClockoutLocationId',
        'created_at' => 'getCreatedAt',
        'updated_at' => 'getUpdatedAt'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['employee_id'] = isset($data['employee_id']) ? $data['employee_id'] : null;
        $this->container['deleted'] = isset($data['deleted']) ? $data['deleted'] : null;
        $this->container['clockin_time'] = isset($data['clockin_time']) ? $data['clockin_time'] : null;
        $this->container['clockout_time'] = isset($data['clockout_time']) ? $data['clockout_time'] : null;
        $this->container['clockin_location_id'] = isset($data['clockin_location_id']) ? $data['clockin_location_id'] : null;
        $this->container['clockout_location_id'] = isset($data['clockout_location_id']) ? $data['clockout_location_id'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['updated_at'] = isset($data['updated_at']) ? $data['updated_at'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        if ($this->container['employee_id'] === null) {
            $invalid_properties[] = "'employee_id' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        if ($this->container['employee_id'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets id
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param string $id The timecard's unique ID.
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets employee_id
     * @return string
     */
    public function getEmployeeId()
    {
        return $this->container['employee_id'];
    }

    /**
     * Sets employee_id
     * @param string $employee_id The ID of the employee the timecard is associated with.
     * @return $this
     */
    public function setEmployeeId($employee_id)
    {
        $this->container['employee_id'] = $employee_id;

        return $this;
    }

    /**
     * Gets deleted
     * @return bool
     */
    public function getDeleted()
    {
        return $this->container['deleted'];
    }

    /**
     * Sets deleted
     * @param bool $deleted If true, the timecard was deleted by the merchant, and it is no longer valid.
     * @return $this
     */
    public function setDeleted($deleted)
    {
        $this->container['deleted'] = $deleted;

        return $this;
    }

    /**
     * Gets clockin_time
     * @return string
     */
    public function getClockinTime()
    {
        return $this->container['clockin_time'];
    }

    /**
     * Sets clockin_time
     * @param string $clockin_time The clock-in time for the timecard, in ISO 8601 format.
     * @return $this
     */
    public function setClockinTime($clockin_time)
    {
        $this->container['clockin_time'] = $clockin_time;

        return $this;
    }

    /**
     * Gets clockout_time
     * @return string
     */
    public function getClockoutTime()
    {
        return $this->container['clockout_time'];
    }

    /**
     * Sets clockout_time
     * @param string $clockout_time The clock-out time for the timecard, in ISO 8601 format. Provide this value only if importing timecard information from another system.
     * @return $this
     */
    public function setClockoutTime($clockout_time)
    {
        $this->container['clockout_time'] = $clockout_time;

        return $this;
    }

    /**
     * Gets clockin_location_id
     * @return string
     */
    public function getClockinLocationId()
    {
        return $this->container['clockin_location_id'];
    }

    /**
     * Sets clockin_location_id
     * @param string $clockin_location_id The ID of the location the employee clocked in from, if any.
     * @return $this
     */
    public function setClockinLocationId($clockin_location_id)
    {
        $this->container['clockin_location_id'] = $clockin_location_id;

        return $this;
    }

    /**
     * Gets clockout_location_id
     * @return string
     */
    public function getClockoutLocationId()
    {
        return $this->container['clockout_location_id'];
    }

    /**
     * Sets clockout_location_id
     * @param string $clockout_location_id The ID of the location the employee clocked out from. Provide this value only if importing timecard information from another system.
     * @return $this
     */
    public function setClockoutLocationId($clockout_location_id)
    {
        $this->container['clockout_location_id'] = $clockout_location_id;

        return $this;
    }

    /**
     * Gets created_at
     * @return string
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     * @param string $created_at The time when the timecard was created, in ISO 8601 format.
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     * @return string
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     * @param string $updated_at The time when the timecard was most recently updated, in ISO 8601 format.
     * @return $this
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\SquareConnect\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\SquareConnect\ObjectSerializer::sanitizeForSerialization($this));
    }
}



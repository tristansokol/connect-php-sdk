<?php
/**
 * Error
 *
 * PHP version 5
 *
 * @category Class
 * @package  SquareConnect
 * @author   Square Inc.
 * @license  Apache Licene v2 - http://www.apache.org/licenses/LICENSE-2.0
 * @link     https://squareup.com/developers
 */

/**
 * Square Connect API
 *
 * Client library for accessing the Square Connect APIs
 *
 * OpenAPI spec version: 3.0
 * Contact: developers@squareup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 *  Copyright 2016 Square, Inc.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace SquareConnect\Model;

use \ArrayAccess;

/**
 * Error Class Doc Comment
 *
 * @category    Class */
 // @description 
/**
 * @package     SquareConnect
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Error implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Error';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'category' => 'string',
        'code' => 'string',
        'detail' => 'string',
        'field' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'category' => 'category',
        'code' => 'code',
        'detail' => 'detail',
        'field' => 'field'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'category' => 'setCategory',
        'code' => 'setCode',
        'detail' => 'setDetail',
        'field' => 'setField'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'category' => 'getCategory',
        'code' => 'getCode',
        'detail' => 'getDetail',
        'field' => 'getField'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const CATEGORY_API_ERROR = 'API_ERROR';
    const CATEGORY_AUTHENTICATION_ERROR = 'AUTHENTICATION_ERROR';
    const CATEGORY_INVALID_REQUEST_ERROR = 'INVALID_REQUEST_ERROR';
    const CATEGORY_RATE_LIMIT_ERROR = 'RATE_LIMIT_ERROR';
    const CATEGORY_PAYMENT_METHOD_ERROR = 'PAYMENT_METHOD_ERROR';
    const CATEGORY_REFUND_ERROR = 'REFUND_ERROR';
    const CODE_INTERNAL_SERVER_ERROR = 'INTERNAL_SERVER_ERROR';
    const CODE_UNAUTHORIZED = 'UNAUTHORIZED';
    const CODE_ACCESS_TOKEN_EXPIRED = 'ACCESS_TOKEN_EXPIRED';
    const CODE_ACCESS_TOKEN_REVOKED = 'ACCESS_TOKEN_REVOKED';
    const CODE_FORBIDDEN = 'FORBIDDEN';
    const CODE_INSUFFICIENT_SCOPES = 'INSUFFICIENT_SCOPES';
    const CODE_APPLICATION_DISABLED = 'APPLICATION_DISABLED';
    const CODE_V1_APPLICATION = 'V1_APPLICATION';
    const CODE_V1_ACCESS_TOKEN = 'V1_ACCESS_TOKEN';
    const CODE_CARD_PROCESSING_NOT_ENABLED = 'CARD_PROCESSING_NOT_ENABLED';
    const CODE_BAD_REQUEST = 'BAD_REQUEST';
    const CODE_MISSING_REQUIRED_PARAMETER = 'MISSING_REQUIRED_PARAMETER';
    const CODE_INCORRECT_TYPE = 'INCORRECT_TYPE';
    const CODE_INVALID_TIME = 'INVALID_TIME';
    const CODE_INVALID_TIME_RANGE = 'INVALID_TIME_RANGE';
    const CODE_INVALID_VALUE = 'INVALID_VALUE';
    const CODE_INVALID_CURSOR = 'INVALID_CURSOR';
    const CODE_UNKNOWN_QUERY_PARAMETER = 'UNKNOWN_QUERY_PARAMETER';
    const CODE_CONFLICTING_PARAMETERS = 'CONFLICTING_PARAMETERS';
    const CODE_EXPECTED_JSON_BODY = 'EXPECTED_JSON_BODY';
    const CODE_INVALID_SORT_ORDER = 'INVALID_SORT_ORDER';
    const CODE_VALUE_TOO_LONG = 'VALUE_TOO_LONG';
    const CODE_VALUE_TOO_LOW = 'VALUE_TOO_LOW';
    const CODE_EXPECTED_BOOLEAN = 'EXPECTED_BOOLEAN';
    const CODE_EXPECTED_INTEGER = 'EXPECTED_INTEGER';
    const CODE_EXPECTED_FLOAT = 'EXPECTED_FLOAT';
    const CODE_EXPECTED_STRING = 'EXPECTED_STRING';
    const CODE_EXPECTED_OBJECT = 'EXPECTED_OBJECT';
    const CODE_EXPECTED_ARRAY = 'EXPECTED_ARRAY';
    const CODE_INVALID_ARRAY_VALUE = 'INVALID_ARRAY_VALUE';
    const CODE_INVALID_ENUM_VALUE = 'INVALID_ENUM_VALUE';
    const CODE_INVALID_CONTENT_TYPE = 'INVALID_CONTENT_TYPE';
    const CODE_INVALID_FORM_VALUE = 'INVALID_FORM_VALUE';
    const CODE_ONE_INSTRUMENT_EXPECTED = 'ONE_INSTRUMENT_EXPECTED';
    const CODE_NO_FIELDS_SET = 'NO_FIELDS_SET';
    const CODE_CARD_DECLINED = 'CARD_DECLINED';
    const CODE_CARD_EXPIRED = 'CARD_EXPIRED';
    const CODE_VERIFY_CVV_FAILURE = 'VERIFY_CVV_FAILURE';
    const CODE_VERIFY_AVS_FAILURE = 'VERIFY_AVS_FAILURE';
    const CODE_INVALID_EXPIRATION = 'INVALID_EXPIRATION';
    const CODE_INVALID_EXPIRATION_YEAR = 'INVALID_EXPIRATION_YEAR';
    const CODE_INVALID_EXPIRATION_DATE = 'INVALID_EXPIRATION_DATE';
    const CODE_INVALID_CARD = 'INVALID_CARD';
    const CODE_DELAYED_TRANSACTION_EXPIRED = 'DELAYED_TRANSACTION_EXPIRED';
    const CODE_DELAYED_TRANSACTION_CANCELED = 'DELAYED_TRANSACTION_CANCELED';
    const CODE_DELAYED_TRANSACTION_CAPTURED = 'DELAYED_TRANSACTION_CAPTURED';
    const CODE_DELAYED_TRANSACTION_FAILED = 'DELAYED_TRANSACTION_FAILED';
    const CODE_CARD_TOKEN_EXPIRED = 'CARD_TOKEN_EXPIRED';
    const CODE_CARD_TOKEN_USED = 'CARD_TOKEN_USED';
    const CODE_AMOUNT_TOO_HIGH = 'AMOUNT_TOO_HIGH';
    const CODE_UNSUPPORTED_INSTRUMENT_TYPE = 'UNSUPPORTED_INSTRUMENT_TYPE';
    const CODE_REFUND_AMOUNT_INVALID = 'REFUND_AMOUNT_INVALID';
    const CODE_REFUND_ALREADY_PENDING = 'REFUND_ALREADY_PENDING';
    const CODE_PAYMENT_NOT_REFUNDABLE = 'PAYMENT_NOT_REFUNDABLE';
    const CODE_INVALID_CARD_DATA = 'INVALID_CARD_DATA';
    const CODE_NOT_FOUND = 'NOT_FOUND';
    const CODE_REQUEST_TIMEOUT = 'REQUEST_TIMEOUT';
    const CODE_REQUEST_ENTITY_TOO_LARGE = 'REQUEST_ENTITY_TOO_LARGE';
    const CODE_UNSUPPORTED_MEDIA_TYPE = 'UNSUPPORTED_MEDIA_TYPE';
    const CODE_RATE_LIMITED = 'RATE_LIMITED';
    const CODE_NOT_IMPLEMENTED = 'NOT_IMPLEMENTED';
    const CODE_SERVICE_UNAVAILABLE = 'SERVICE_UNAVAILABLE';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getCategoryAllowableValues()
    {
        return [
            self::CATEGORY_API_ERROR,
            self::CATEGORY_AUTHENTICATION_ERROR,
            self::CATEGORY_INVALID_REQUEST_ERROR,
            self::CATEGORY_RATE_LIMIT_ERROR,
            self::CATEGORY_PAYMENT_METHOD_ERROR,
            self::CATEGORY_REFUND_ERROR,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getCodeAllowableValues()
    {
        return [
            self::CODE_INTERNAL_SERVER_ERROR,
            self::CODE_UNAUTHORIZED,
            self::CODE_ACCESS_TOKEN_EXPIRED,
            self::CODE_ACCESS_TOKEN_REVOKED,
            self::CODE_FORBIDDEN,
            self::CODE_INSUFFICIENT_SCOPES,
            self::CODE_APPLICATION_DISABLED,
            self::CODE_V1_APPLICATION,
            self::CODE_V1_ACCESS_TOKEN,
            self::CODE_CARD_PROCESSING_NOT_ENABLED,
            self::CODE_BAD_REQUEST,
            self::CODE_MISSING_REQUIRED_PARAMETER,
            self::CODE_INCORRECT_TYPE,
            self::CODE_INVALID_TIME,
            self::CODE_INVALID_TIME_RANGE,
            self::CODE_INVALID_VALUE,
            self::CODE_INVALID_CURSOR,
            self::CODE_UNKNOWN_QUERY_PARAMETER,
            self::CODE_CONFLICTING_PARAMETERS,
            self::CODE_EXPECTED_JSON_BODY,
            self::CODE_INVALID_SORT_ORDER,
            self::CODE_VALUE_TOO_LONG,
            self::CODE_VALUE_TOO_LOW,
            self::CODE_EXPECTED_BOOLEAN,
            self::CODE_EXPECTED_INTEGER,
            self::CODE_EXPECTED_FLOAT,
            self::CODE_EXPECTED_STRING,
            self::CODE_EXPECTED_OBJECT,
            self::CODE_EXPECTED_ARRAY,
            self::CODE_INVALID_ARRAY_VALUE,
            self::CODE_INVALID_ENUM_VALUE,
            self::CODE_INVALID_CONTENT_TYPE,
            self::CODE_INVALID_FORM_VALUE,
            self::CODE_ONE_INSTRUMENT_EXPECTED,
            self::CODE_NO_FIELDS_SET,
            self::CODE_CARD_DECLINED,
            self::CODE_CARD_EXPIRED,
            self::CODE_VERIFY_CVV_FAILURE,
            self::CODE_VERIFY_AVS_FAILURE,
            self::CODE_INVALID_EXPIRATION,
            self::CODE_INVALID_EXPIRATION_YEAR,
            self::CODE_INVALID_EXPIRATION_DATE,
            self::CODE_INVALID_CARD,
            self::CODE_DELAYED_TRANSACTION_EXPIRED,
            self::CODE_DELAYED_TRANSACTION_CANCELED,
            self::CODE_DELAYED_TRANSACTION_CAPTURED,
            self::CODE_DELAYED_TRANSACTION_FAILED,
            self::CODE_CARD_TOKEN_EXPIRED,
            self::CODE_CARD_TOKEN_USED,
            self::CODE_AMOUNT_TOO_HIGH,
            self::CODE_UNSUPPORTED_INSTRUMENT_TYPE,
            self::CODE_REFUND_AMOUNT_INVALID,
            self::CODE_REFUND_ALREADY_PENDING,
            self::CODE_PAYMENT_NOT_REFUNDABLE,
            self::CODE_INVALID_CARD_DATA,
            self::CODE_NOT_FOUND,
            self::CODE_REQUEST_TIMEOUT,
            self::CODE_REQUEST_ENTITY_TOO_LARGE,
            self::CODE_UNSUPPORTED_MEDIA_TYPE,
            self::CODE_RATE_LIMITED,
            self::CODE_NOT_IMPLEMENTED,
            self::CODE_SERVICE_UNAVAILABLE,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['category'] = isset($data['category']) ? $data['category'] : null;
        $this->container['code'] = isset($data['code']) ? $data['code'] : null;
        $this->container['detail'] = isset($data['detail']) ? $data['detail'] : null;
        $this->container['field'] = isset($data['field']) ? $data['field'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        if ($this->container['category'] === null) {
            $invalid_properties[] = "'category' can't be null";
        }
        $allowed_values = ["API_ERROR", "AUTHENTICATION_ERROR", "INVALID_REQUEST_ERROR", "RATE_LIMIT_ERROR", "PAYMENT_METHOD_ERROR", "REFUND_ERROR"];
        if (!in_array($this->container['category'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'category', must be one of #{allowed_values}.";
        }

        if ($this->container['code'] === null) {
            $invalid_properties[] = "'code' can't be null";
        }
        $allowed_values = ["INTERNAL_SERVER_ERROR", "UNAUTHORIZED", "ACCESS_TOKEN_EXPIRED", "ACCESS_TOKEN_REVOKED", "FORBIDDEN", "INSUFFICIENT_SCOPES", "APPLICATION_DISABLED", "V1_APPLICATION", "V1_ACCESS_TOKEN", "CARD_PROCESSING_NOT_ENABLED", "BAD_REQUEST", "MISSING_REQUIRED_PARAMETER", "INCORRECT_TYPE", "INVALID_TIME", "INVALID_TIME_RANGE", "INVALID_VALUE", "INVALID_CURSOR", "UNKNOWN_QUERY_PARAMETER", "CONFLICTING_PARAMETERS", "EXPECTED_JSON_BODY", "INVALID_SORT_ORDER", "VALUE_TOO_LONG", "VALUE_TOO_LOW", "EXPECTED_BOOLEAN", "EXPECTED_INTEGER", "EXPECTED_FLOAT", "EXPECTED_STRING", "EXPECTED_OBJECT", "EXPECTED_ARRAY", "INVALID_ARRAY_VALUE", "INVALID_ENUM_VALUE", "INVALID_CONTENT_TYPE", "INVALID_FORM_VALUE", "ONE_INSTRUMENT_EXPECTED", "NO_FIELDS_SET", "CARD_DECLINED", "CARD_EXPIRED", "VERIFY_CVV_FAILURE", "VERIFY_AVS_FAILURE", "INVALID_EXPIRATION", "INVALID_EXPIRATION_YEAR", "INVALID_EXPIRATION_DATE", "INVALID_CARD", "DELAYED_TRANSACTION_EXPIRED", "DELAYED_TRANSACTION_CANCELED", "DELAYED_TRANSACTION_CAPTURED", "DELAYED_TRANSACTION_FAILED", "CARD_TOKEN_EXPIRED", "CARD_TOKEN_USED", "AMOUNT_TOO_HIGH", "UNSUPPORTED_INSTRUMENT_TYPE", "REFUND_AMOUNT_INVALID", "REFUND_ALREADY_PENDING", "PAYMENT_NOT_REFUNDABLE", "INVALID_CARD_DATA", "NOT_FOUND", "REQUEST_TIMEOUT", "REQUEST_ENTITY_TOO_LARGE", "UNSUPPORTED_MEDIA_TYPE", "RATE_LIMITED", "NOT_IMPLEMENTED", "SERVICE_UNAVAILABLE"];
        if (!in_array($this->container['code'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'code', must be one of #{allowed_values}.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        if ($this->container['category'] === null) {
            return false;
        }
        $allowed_values = ["API_ERROR", "AUTHENTICATION_ERROR", "INVALID_REQUEST_ERROR", "RATE_LIMIT_ERROR", "PAYMENT_METHOD_ERROR", "REFUND_ERROR"];
        if (!in_array($this->container['category'], $allowed_values)) {
            return false;
        }
        if ($this->container['code'] === null) {
            return false;
        }
        $allowed_values = ["INTERNAL_SERVER_ERROR", "UNAUTHORIZED", "ACCESS_TOKEN_EXPIRED", "ACCESS_TOKEN_REVOKED", "FORBIDDEN", "INSUFFICIENT_SCOPES", "APPLICATION_DISABLED", "V1_APPLICATION", "V1_ACCESS_TOKEN", "CARD_PROCESSING_NOT_ENABLED", "BAD_REQUEST", "MISSING_REQUIRED_PARAMETER", "INCORRECT_TYPE", "INVALID_TIME", "INVALID_TIME_RANGE", "INVALID_VALUE", "INVALID_CURSOR", "UNKNOWN_QUERY_PARAMETER", "CONFLICTING_PARAMETERS", "EXPECTED_JSON_BODY", "INVALID_SORT_ORDER", "VALUE_TOO_LONG", "VALUE_TOO_LOW", "EXPECTED_BOOLEAN", "EXPECTED_INTEGER", "EXPECTED_FLOAT", "EXPECTED_STRING", "EXPECTED_OBJECT", "EXPECTED_ARRAY", "INVALID_ARRAY_VALUE", "INVALID_ENUM_VALUE", "INVALID_CONTENT_TYPE", "INVALID_FORM_VALUE", "ONE_INSTRUMENT_EXPECTED", "NO_FIELDS_SET", "CARD_DECLINED", "CARD_EXPIRED", "VERIFY_CVV_FAILURE", "VERIFY_AVS_FAILURE", "INVALID_EXPIRATION", "INVALID_EXPIRATION_YEAR", "INVALID_EXPIRATION_DATE", "INVALID_CARD", "DELAYED_TRANSACTION_EXPIRED", "DELAYED_TRANSACTION_CANCELED", "DELAYED_TRANSACTION_CAPTURED", "DELAYED_TRANSACTION_FAILED", "CARD_TOKEN_EXPIRED", "CARD_TOKEN_USED", "AMOUNT_TOO_HIGH", "UNSUPPORTED_INSTRUMENT_TYPE", "REFUND_AMOUNT_INVALID", "REFUND_ALREADY_PENDING", "PAYMENT_NOT_REFUNDABLE", "INVALID_CARD_DATA", "NOT_FOUND", "REQUEST_TIMEOUT", "REQUEST_ENTITY_TOO_LARGE", "UNSUPPORTED_MEDIA_TYPE", "RATE_LIMITED", "NOT_IMPLEMENTED", "SERVICE_UNAVAILABLE"];
        if (!in_array($this->container['code'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets category
     * @return string
     */
    public function getCategory()
    {
        return $this->container['category'];
    }

    /**
     * Sets category
     * @param string $category 
     * @return $this
     */
    public function setCategory($category)
    {
        $allowed_values = array('API_ERROR', 'AUTHENTICATION_ERROR', 'INVALID_REQUEST_ERROR', 'RATE_LIMIT_ERROR', 'PAYMENT_METHOD_ERROR', 'REFUND_ERROR');
        if ((!in_array($category, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'category', must be one of 'API_ERROR', 'AUTHENTICATION_ERROR', 'INVALID_REQUEST_ERROR', 'RATE_LIMIT_ERROR', 'PAYMENT_METHOD_ERROR', 'REFUND_ERROR'");
        }
        $this->container['category'] = $category;

        return $this;
    }

    /**
     * Gets code
     * @return string
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     * @param string $code 
     * @return $this
     */
    public function setCode($code)
    {
        $allowed_values = array('INTERNAL_SERVER_ERROR', 'UNAUTHORIZED', 'ACCESS_TOKEN_EXPIRED', 'ACCESS_TOKEN_REVOKED', 'FORBIDDEN', 'INSUFFICIENT_SCOPES', 'APPLICATION_DISABLED', 'V1_APPLICATION', 'V1_ACCESS_TOKEN', 'CARD_PROCESSING_NOT_ENABLED', 'BAD_REQUEST', 'MISSING_REQUIRED_PARAMETER', 'INCORRECT_TYPE', 'INVALID_TIME', 'INVALID_TIME_RANGE', 'INVALID_VALUE', 'INVALID_CURSOR', 'UNKNOWN_QUERY_PARAMETER', 'CONFLICTING_PARAMETERS', 'EXPECTED_JSON_BODY', 'INVALID_SORT_ORDER', 'VALUE_TOO_LONG', 'VALUE_TOO_LOW', 'EXPECTED_BOOLEAN', 'EXPECTED_INTEGER', 'EXPECTED_FLOAT', 'EXPECTED_STRING', 'EXPECTED_OBJECT', 'EXPECTED_ARRAY', 'INVALID_ARRAY_VALUE', 'INVALID_ENUM_VALUE', 'INVALID_CONTENT_TYPE', 'INVALID_FORM_VALUE', 'ONE_INSTRUMENT_EXPECTED', 'NO_FIELDS_SET', 'CARD_DECLINED', 'CARD_EXPIRED', 'VERIFY_CVV_FAILURE', 'VERIFY_AVS_FAILURE', 'INVALID_EXPIRATION', 'INVALID_EXPIRATION_YEAR', 'INVALID_EXPIRATION_DATE', 'INVALID_CARD', 'DELAYED_TRANSACTION_EXPIRED', 'DELAYED_TRANSACTION_CANCELED', 'DELAYED_TRANSACTION_CAPTURED', 'DELAYED_TRANSACTION_FAILED', 'CARD_TOKEN_EXPIRED', 'CARD_TOKEN_USED', 'AMOUNT_TOO_HIGH', 'UNSUPPORTED_INSTRUMENT_TYPE', 'REFUND_AMOUNT_INVALID', 'REFUND_ALREADY_PENDING', 'PAYMENT_NOT_REFUNDABLE', 'INVALID_CARD_DATA', 'NOT_FOUND', 'REQUEST_TIMEOUT', 'REQUEST_ENTITY_TOO_LARGE', 'UNSUPPORTED_MEDIA_TYPE', 'RATE_LIMITED', 'NOT_IMPLEMENTED', 'SERVICE_UNAVAILABLE');
        if ((!in_array($code, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'code', must be one of 'INTERNAL_SERVER_ERROR', 'UNAUTHORIZED', 'ACCESS_TOKEN_EXPIRED', 'ACCESS_TOKEN_REVOKED', 'FORBIDDEN', 'INSUFFICIENT_SCOPES', 'APPLICATION_DISABLED', 'V1_APPLICATION', 'V1_ACCESS_TOKEN', 'CARD_PROCESSING_NOT_ENABLED', 'BAD_REQUEST', 'MISSING_REQUIRED_PARAMETER', 'INCORRECT_TYPE', 'INVALID_TIME', 'INVALID_TIME_RANGE', 'INVALID_VALUE', 'INVALID_CURSOR', 'UNKNOWN_QUERY_PARAMETER', 'CONFLICTING_PARAMETERS', 'EXPECTED_JSON_BODY', 'INVALID_SORT_ORDER', 'VALUE_TOO_LONG', 'VALUE_TOO_LOW', 'EXPECTED_BOOLEAN', 'EXPECTED_INTEGER', 'EXPECTED_FLOAT', 'EXPECTED_STRING', 'EXPECTED_OBJECT', 'EXPECTED_ARRAY', 'INVALID_ARRAY_VALUE', 'INVALID_ENUM_VALUE', 'INVALID_CONTENT_TYPE', 'INVALID_FORM_VALUE', 'ONE_INSTRUMENT_EXPECTED', 'NO_FIELDS_SET', 'CARD_DECLINED', 'CARD_EXPIRED', 'VERIFY_CVV_FAILURE', 'VERIFY_AVS_FAILURE', 'INVALID_EXPIRATION', 'INVALID_EXPIRATION_YEAR', 'INVALID_EXPIRATION_DATE', 'INVALID_CARD', 'DELAYED_TRANSACTION_EXPIRED', 'DELAYED_TRANSACTION_CANCELED', 'DELAYED_TRANSACTION_CAPTURED', 'DELAYED_TRANSACTION_FAILED', 'CARD_TOKEN_EXPIRED', 'CARD_TOKEN_USED', 'AMOUNT_TOO_HIGH', 'UNSUPPORTED_INSTRUMENT_TYPE', 'REFUND_AMOUNT_INVALID', 'REFUND_ALREADY_PENDING', 'PAYMENT_NOT_REFUNDABLE', 'INVALID_CARD_DATA', 'NOT_FOUND', 'REQUEST_TIMEOUT', 'REQUEST_ENTITY_TOO_LARGE', 'UNSUPPORTED_MEDIA_TYPE', 'RATE_LIMITED', 'NOT_IMPLEMENTED', 'SERVICE_UNAVAILABLE'");
        }
        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets detail
     * @return string
     */
    public function getDetail()
    {
        return $this->container['detail'];
    }

    /**
     * Sets detail
     * @param string $detail 
     * @return $this
     */
    public function setDetail($detail)
    {
        $this->container['detail'] = $detail;

        return $this;
    }

    /**
     * Gets field
     * @return string
     */
    public function getField()
    {
        return $this->container['field'];
    }

    /**
     * Sets field
     * @param string $field 
     * @return $this
     */
    public function setField($field)
    {
        $this->container['field'] = $field;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\SquareConnect\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\SquareConnect\ObjectSerializer::sanitizeForSerialization($this));
    }
}



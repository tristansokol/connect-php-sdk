<?php
/**
 * V1UpdateItemVariation
 *
 * PHP version 5
 *
 * @category Class
 * @package  SquareConnect
 * @author   Square Inc.
 * @license  Apache Licene v2 - http://www.apache.org/licenses/LICENSE-2.0
 * @link     https://squareup.com/developers
 */

/**
 * Square Connect API
 *
 * Client library for accessing the Square Connect APIs
 *
 * OpenAPI spec version: 3.0
 * Contact: developers@squareup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 *  Copyright 2016 Square, Inc.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace SquareConnect\Model;

use \ArrayAccess;

/**
 * V1UpdateItemVariation Class Doc Comment
 *
 * @category    Class */
/**
 * @package     SquareConnect
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class V1UpdateItemVariation implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'v1UpdateItemVariation';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'name' => 'string',
        'pricing_type' => 'string',
        'price_money' => '\SquareConnect\Model\Money',
        'sku' => 'string',
        'track_inventory' => 'bool',
        'inventory_alert_type' => 'string',
        'inventory_alert_threshold' => 'int',
        'user_data' => 'bool'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'pricing_type' => 'pricing_type',
        'price_money' => 'price_money',
        'sku' => 'sku',
        'track_inventory' => 'track_inventory',
        'inventory_alert_type' => 'inventory_alert_type',
        'inventory_alert_threshold' => 'inventory_alert_threshold',
        'user_data' => 'user_data'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'pricing_type' => 'setPricingType',
        'price_money' => 'setPriceMoney',
        'sku' => 'setSku',
        'track_inventory' => 'setTrackInventory',
        'inventory_alert_type' => 'setInventoryAlertType',
        'inventory_alert_threshold' => 'setInventoryAlertThreshold',
        'user_data' => 'setUserData'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'pricing_type' => 'getPricingType',
        'price_money' => 'getPriceMoney',
        'sku' => 'getSku',
        'track_inventory' => 'getTrackInventory',
        'inventory_alert_type' => 'getInventoryAlertType',
        'inventory_alert_threshold' => 'getInventoryAlertThreshold',
        'user_data' => 'getUserData'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const PRICING_TYPE_FIXED_PRICING = 'FIXED_PRICING';
    const PRICING_TYPE_VARIABLE_PRICING = 'VARIABLE_PRICING';
    const INVENTORY_ALERT_TYPE_LOW_QUANTITY = 'LOW_QUANTITY';
    const INVENTORY_ALERT_TYPE_NONE = 'NONE';
    const INVENTORY_ALERT_TYPE_INVESTMENT = 'INVESTMENT';
    const INVENTORY_ALERT_TYPE_LOAN = 'LOAN';
    const INVENTORY_ALERT_TYPE_SAVINGS = 'SAVINGS';
    const INVENTORY_ALERT_TYPE_OTHER = 'OTHER';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getPricingTypeAllowableValues()
    {
        return [
            self::PRICING_TYPE_FIXED_PRICING,
            self::PRICING_TYPE_VARIABLE_PRICING,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getInventoryAlertTypeAllowableValues()
    {
        return [
            self::INVENTORY_ALERT_TYPE_LOW_QUANTITY,
            self::INVENTORY_ALERT_TYPE_NONE,
            self::INVENTORY_ALERT_TYPE_INVESTMENT,
            self::INVENTORY_ALERT_TYPE_LOAN,
            self::INVENTORY_ALERT_TYPE_SAVINGS,
            self::INVENTORY_ALERT_TYPE_OTHER,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['pricing_type'] = isset($data['pricing_type']) ? $data['pricing_type'] : null;
        $this->container['price_money'] = isset($data['price_money']) ? $data['price_money'] : null;
        $this->container['sku'] = isset($data['sku']) ? $data['sku'] : null;
        $this->container['track_inventory'] = isset($data['track_inventory']) ? $data['track_inventory'] : null;
        $this->container['inventory_alert_type'] = isset($data['inventory_alert_type']) ? $data['inventory_alert_type'] : null;
        $this->container['inventory_alert_threshold'] = isset($data['inventory_alert_threshold']) ? $data['inventory_alert_threshold'] : null;
        $this->container['user_data'] = isset($data['user_data']) ? $data['user_data'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        $allowed_values = ["FIXED_PRICING", "VARIABLE_PRICING"];
        if (!in_array($this->container['pricing_type'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'pricing_type', must be one of #{allowed_values}.";
        }

        $allowed_values = ["LOW_QUANTITY", "NONE", "INVESTMENT", "LOAN", "SAVINGS", "OTHER"];
        if (!in_array($this->container['inventory_alert_type'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'inventory_alert_type', must be one of #{allowed_values}.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        $allowed_values = ["FIXED_PRICING", "VARIABLE_PRICING"];
        if (!in_array($this->container['pricing_type'], $allowed_values)) {
            return false;
        }
        $allowed_values = ["LOW_QUANTITY", "NONE", "INVESTMENT", "LOAN", "SAVINGS", "OTHER"];
        if (!in_array($this->container['inventory_alert_type'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     * @param string $name The item variation's name.
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets pricing_type
     * @return string
     */
    public function getPricingType()
    {
        return $this->container['pricing_type'];
    }

    /**
     * Sets pricing_type
     * @param string $pricing_type Indicates whether the item variation's price is fixed or determined at the time of sale.
     * @return $this
     */
    public function setPricingType($pricing_type)
    {
        $allowed_values = array('FIXED_PRICING', 'VARIABLE_PRICING');
        if (!is_null($pricing_type) && (!in_array($pricing_type, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'pricing_type', must be one of 'FIXED_PRICING', 'VARIABLE_PRICING'");
        }
        $this->container['pricing_type'] = $pricing_type;

        return $this;
    }

    /**
     * Gets price_money
     * @return \SquareConnect\Model\Money
     */
    public function getPriceMoney()
    {
        return $this->container['price_money'];
    }

    /**
     * Sets price_money
     * @param \SquareConnect\Model\Money $price_money The item variation's price, if any.
     * @return $this
     */
    public function setPriceMoney($price_money)
    {
        $this->container['price_money'] = $price_money;

        return $this;
    }

    /**
     * Gets sku
     * @return string
     */
    public function getSku()
    {
        return $this->container['sku'];
    }

    /**
     * Sets sku
     * @param string $sku The item variation's SKU, if any.
     * @return $this
     */
    public function setSku($sku)
    {
        $this->container['sku'] = $sku;

        return $this;
    }

    /**
     * Gets track_inventory
     * @return bool
     */
    public function getTrackInventory()
    {
        return $this->container['track_inventory'];
    }

    /**
     * Sets track_inventory
     * @param bool $track_inventory If true, inventory tracking is active for the variation.
     * @return $this
     */
    public function setTrackInventory($track_inventory)
    {
        $this->container['track_inventory'] = $track_inventory;

        return $this;
    }

    /**
     * Gets inventory_alert_type
     * @return string
     */
    public function getInventoryAlertType()
    {
        return $this->container['inventory_alert_type'];
    }

    /**
     * Sets inventory_alert_type
     * @param string $inventory_alert_type Indicates whether the item variation displays an alert when its inventory quantity is less than or equal to its inventory_alert_threshold.
     * @return $this
     */
    public function setInventoryAlertType($inventory_alert_type)
    {
        $allowed_values = array('LOW_QUANTITY', 'NONE', 'INVESTMENT', 'LOAN', 'SAVINGS', 'OTHER');
        if (!is_null($inventory_alert_type) && (!in_array($inventory_alert_type, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'inventory_alert_type', must be one of 'LOW_QUANTITY', 'NONE', 'INVESTMENT', 'LOAN', 'SAVINGS', 'OTHER'");
        }
        $this->container['inventory_alert_type'] = $inventory_alert_type;

        return $this;
    }

    /**
     * Gets inventory_alert_threshold
     * @return int
     */
    public function getInventoryAlertThreshold()
    {
        return $this->container['inventory_alert_threshold'];
    }

    /**
     * Sets inventory_alert_threshold
     * @param int $inventory_alert_threshold If the inventory quantity for the variation is less than or equal to this value and inventory_alert_type is LOW_QUANTITY, the variation displays an alert in the merchant dashboard.
     * @return $this
     */
    public function setInventoryAlertThreshold($inventory_alert_threshold)
    {
        $this->container['inventory_alert_threshold'] = $inventory_alert_threshold;

        return $this;
    }

    /**
     * Gets user_data
     * @return bool
     */
    public function getUserData()
    {
        return $this->container['user_data'];
    }

    /**
     * Sets user_data
     * @param bool $user_data Arbitrary metadata associated with the variation. Cannot exceed 255 characters.
     * @return $this
     */
    public function setUserData($user_data)
    {
        $this->container['user_data'] = $user_data;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\SquareConnect\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\SquareConnect\ObjectSerializer::sanitizeForSerialization($this));
    }
}



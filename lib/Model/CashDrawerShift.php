<?php
/**
 * CashDrawerShift
 *
 * PHP version 5
 *
 * @category Class
 * @package  SquareConnect
 * @author   Square Inc.
 * @license  Apache Licene v2 - http://www.apache.org/licenses/LICENSE-2.0
 * @link     https://squareup.com/developers
 */

/**
 * Square Connect API
 *
 * Client library for accessing the Square Connect APIs
 *
 * OpenAPI spec version: 3.0
 * Contact: developers@squareup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 *  Copyright 2016 Square, Inc.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace SquareConnect\Model;

use \ArrayAccess;

/**
 * CashDrawerShift Class Doc Comment
 *
 * @category    Class */
/**
 * @package     SquareConnect
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class CashDrawerShift implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'CashDrawerShift';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'event_type' => 'string',
        'opened_at' => 'string',
        'ended_at' => 'bool',
        'closed_at' => 'string',
        'employee_ids' => 'string[]',
        'opening_employee_id' => 'string',
        'ending_employee_id' => 'string',
        'closing_employee_id' => 'string',
        'description' => 'string',
        'starting_cash_money' => '\SquareConnect\Model\Money',
        'cash_payment_money' => '\SquareConnect\Model\Money',
        'cash_refunds_money' => '\SquareConnect\Model\Money',
        'cash_paid_in_money' => '\SquareConnect\Model\Money',
        'cash_paid_out_money' => '\SquareConnect\Model\Money',
        'expected_cash_money' => '\SquareConnect\Model\Money',
        'closed_cash_money' => '\SquareConnect\Model\Money',
        'device' => '\SquareConnect\Model\Device',
        'events' => '\SquareConnect\Model\CashDrawerEvent[]'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'event_type' => 'event_type',
        'opened_at' => 'opened_at',
        'ended_at' => 'ended_at',
        'closed_at' => 'closed_at',
        'employee_ids' => 'employee_ids',
        'opening_employee_id' => 'opening_employee_id',
        'ending_employee_id' => 'ending_employee_id',
        'closing_employee_id' => 'closing_employee_id',
        'description' => 'description',
        'starting_cash_money' => 'starting_cash_money',
        'cash_payment_money' => 'cash_payment_money',
        'cash_refunds_money' => 'cash_refunds_money',
        'cash_paid_in_money' => 'cash_paid_in_money',
        'cash_paid_out_money' => 'cash_paid_out_money',
        'expected_cash_money' => 'expected_cash_money',
        'closed_cash_money' => 'closed_cash_money',
        'device' => 'device',
        'events' => 'events'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'event_type' => 'setEventType',
        'opened_at' => 'setOpenedAt',
        'ended_at' => 'setEndedAt',
        'closed_at' => 'setClosedAt',
        'employee_ids' => 'setEmployeeIds',
        'opening_employee_id' => 'setOpeningEmployeeId',
        'ending_employee_id' => 'setEndingEmployeeId',
        'closing_employee_id' => 'setClosingEmployeeId',
        'description' => 'setDescription',
        'starting_cash_money' => 'setStartingCashMoney',
        'cash_payment_money' => 'setCashPaymentMoney',
        'cash_refunds_money' => 'setCashRefundsMoney',
        'cash_paid_in_money' => 'setCashPaidInMoney',
        'cash_paid_out_money' => 'setCashPaidOutMoney',
        'expected_cash_money' => 'setExpectedCashMoney',
        'closed_cash_money' => 'setClosedCashMoney',
        'device' => 'setDevice',
        'events' => 'setEvents'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'event_type' => 'getEventType',
        'opened_at' => 'getOpenedAt',
        'ended_at' => 'getEndedAt',
        'closed_at' => 'getClosedAt',
        'employee_ids' => 'getEmployeeIds',
        'opening_employee_id' => 'getOpeningEmployeeId',
        'ending_employee_id' => 'getEndingEmployeeId',
        'closing_employee_id' => 'getClosingEmployeeId',
        'description' => 'getDescription',
        'starting_cash_money' => 'getStartingCashMoney',
        'cash_payment_money' => 'getCashPaymentMoney',
        'cash_refunds_money' => 'getCashRefundsMoney',
        'cash_paid_in_money' => 'getCashPaidInMoney',
        'cash_paid_out_money' => 'getCashPaidOutMoney',
        'expected_cash_money' => 'getExpectedCashMoney',
        'closed_cash_money' => 'getClosedCashMoney',
        'device' => 'getDevice',
        'events' => 'getEvents'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const EVENT_TYPE_OPEN = 'OPEN';
    const EVENT_TYPE_ENDED = 'ENDED';
    const EVENT_TYPE_CLOSED = 'CLOSED';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getEventTypeAllowableValues()
    {
        return [
            self::EVENT_TYPE_OPEN,
            self::EVENT_TYPE_ENDED,
            self::EVENT_TYPE_CLOSED,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['event_type'] = isset($data['event_type']) ? $data['event_type'] : null;
        $this->container['opened_at'] = isset($data['opened_at']) ? $data['opened_at'] : null;
        $this->container['ended_at'] = isset($data['ended_at']) ? $data['ended_at'] : null;
        $this->container['closed_at'] = isset($data['closed_at']) ? $data['closed_at'] : null;
        $this->container['employee_ids'] = isset($data['employee_ids']) ? $data['employee_ids'] : null;
        $this->container['opening_employee_id'] = isset($data['opening_employee_id']) ? $data['opening_employee_id'] : null;
        $this->container['ending_employee_id'] = isset($data['ending_employee_id']) ? $data['ending_employee_id'] : null;
        $this->container['closing_employee_id'] = isset($data['closing_employee_id']) ? $data['closing_employee_id'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['starting_cash_money'] = isset($data['starting_cash_money']) ? $data['starting_cash_money'] : null;
        $this->container['cash_payment_money'] = isset($data['cash_payment_money']) ? $data['cash_payment_money'] : null;
        $this->container['cash_refunds_money'] = isset($data['cash_refunds_money']) ? $data['cash_refunds_money'] : null;
        $this->container['cash_paid_in_money'] = isset($data['cash_paid_in_money']) ? $data['cash_paid_in_money'] : null;
        $this->container['cash_paid_out_money'] = isset($data['cash_paid_out_money']) ? $data['cash_paid_out_money'] : null;
        $this->container['expected_cash_money'] = isset($data['expected_cash_money']) ? $data['expected_cash_money'] : null;
        $this->container['closed_cash_money'] = isset($data['closed_cash_money']) ? $data['closed_cash_money'] : null;
        $this->container['device'] = isset($data['device']) ? $data['device'] : null;
        $this->container['events'] = isset($data['events']) ? $data['events'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        $allowed_values = ["OPEN", "ENDED", "CLOSED"];
        if (!in_array($this->container['event_type'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'event_type', must be one of #{allowed_values}.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        $allowed_values = ["OPEN", "ENDED", "CLOSED"];
        if (!in_array($this->container['event_type'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets id
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param string $id The shift's unique ID.
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets event_type
     * @return string
     */
    public function getEventType()
    {
        return $this->container['event_type'];
    }

    /**
     * Sets event_type
     * @param string $event_type The shift's current state.
     * @return $this
     */
    public function setEventType($event_type)
    {
        $allowed_values = array('OPEN', 'ENDED', 'CLOSED');
        if (!is_null($event_type) && (!in_array($event_type, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'event_type', must be one of 'OPEN', 'ENDED', 'CLOSED'");
        }
        $this->container['event_type'] = $event_type;

        return $this;
    }

    /**
     * Gets opened_at
     * @return string
     */
    public function getOpenedAt()
    {
        return $this->container['opened_at'];
    }

    /**
     * Sets opened_at
     * @param string $opened_at The time when the shift began, in ISO 8601 format.
     * @return $this
     */
    public function setOpenedAt($opened_at)
    {
        $this->container['opened_at'] = $opened_at;

        return $this;
    }

    /**
     * Gets ended_at
     * @return bool
     */
    public function getEndedAt()
    {
        return $this->container['ended_at'];
    }

    /**
     * Sets ended_at
     * @param bool $ended_at The time when the shift ended, in ISO 8601 format.
     * @return $this
     */
    public function setEndedAt($ended_at)
    {
        $this->container['ended_at'] = $ended_at;

        return $this;
    }

    /**
     * Gets closed_at
     * @return string
     */
    public function getClosedAt()
    {
        return $this->container['closed_at'];
    }

    /**
     * Sets closed_at
     * @param string $closed_at The time when the shift was closed, in ISO 8601 format.
     * @return $this
     */
    public function setClosedAt($closed_at)
    {
        $this->container['closed_at'] = $closed_at;

        return $this;
    }

    /**
     * Gets employee_ids
     * @return string[]
     */
    public function getEmployeeIds()
    {
        return $this->container['employee_ids'];
    }

    /**
     * Sets employee_ids
     * @param string[] $employee_ids The IDs of all employees that were logged into Square Register at some point during the cash drawer shift.
     * @return $this
     */
    public function setEmployeeIds($employee_ids)
    {
        $this->container['employee_ids'] = $employee_ids;

        return $this;
    }

    /**
     * Gets opening_employee_id
     * @return string
     */
    public function getOpeningEmployeeId()
    {
        return $this->container['opening_employee_id'];
    }

    /**
     * Sets opening_employee_id
     * @param string $opening_employee_id The ID of the employee that started the cash drawer shift.
     * @return $this
     */
    public function setOpeningEmployeeId($opening_employee_id)
    {
        $this->container['opening_employee_id'] = $opening_employee_id;

        return $this;
    }

    /**
     * Gets ending_employee_id
     * @return string
     */
    public function getEndingEmployeeId()
    {
        return $this->container['ending_employee_id'];
    }

    /**
     * Sets ending_employee_id
     * @param string $ending_employee_id The ID of the employee that ended the cash drawer shift.
     * @return $this
     */
    public function setEndingEmployeeId($ending_employee_id)
    {
        $this->container['ending_employee_id'] = $ending_employee_id;

        return $this;
    }

    /**
     * Gets closing_employee_id
     * @return string
     */
    public function getClosingEmployeeId()
    {
        return $this->container['closing_employee_id'];
    }

    /**
     * Sets closing_employee_id
     * @param string $closing_employee_id The ID of the employee that closed the cash drawer shift by auditing the cash drawer's contents.
     * @return $this
     */
    public function setClosingEmployeeId($closing_employee_id)
    {
        $this->container['closing_employee_id'] = $closing_employee_id;

        return $this;
    }

    /**
     * Gets description
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     * @param string $description The time when the timecard was created, in ISO 8601 format.
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets starting_cash_money
     * @return \SquareConnect\Model\Money
     */
    public function getStartingCashMoney()
    {
        return $this->container['starting_cash_money'];
    }

    /**
     * Sets starting_cash_money
     * @param \SquareConnect\Model\Money $starting_cash_money The amount of money in the cash drawer at the start of the shift.
     * @return $this
     */
    public function setStartingCashMoney($starting_cash_money)
    {
        $this->container['starting_cash_money'] = $starting_cash_money;

        return $this;
    }

    /**
     * Gets cash_payment_money
     * @return \SquareConnect\Model\Money
     */
    public function getCashPaymentMoney()
    {
        return $this->container['cash_payment_money'];
    }

    /**
     * Sets cash_payment_money
     * @param \SquareConnect\Model\Money $cash_payment_money The amount of money added to the cash drawer from cash payments.
     * @return $this
     */
    public function setCashPaymentMoney($cash_payment_money)
    {
        $this->container['cash_payment_money'] = $cash_payment_money;

        return $this;
    }

    /**
     * Gets cash_refunds_money
     * @return \SquareConnect\Model\Money
     */
    public function getCashRefundsMoney()
    {
        return $this->container['cash_refunds_money'];
    }

    /**
     * Sets cash_refunds_money
     * @param \SquareConnect\Model\Money $cash_refunds_money The amount of money removed from the cash drawer from cash refunds. This value is always negative or zero.
     * @return $this
     */
    public function setCashRefundsMoney($cash_refunds_money)
    {
        $this->container['cash_refunds_money'] = $cash_refunds_money;

        return $this;
    }

    /**
     * Gets cash_paid_in_money
     * @return \SquareConnect\Model\Money
     */
    public function getCashPaidInMoney()
    {
        return $this->container['cash_paid_in_money'];
    }

    /**
     * Sets cash_paid_in_money
     * @param \SquareConnect\Model\Money $cash_paid_in_money The amount of money added to the cash drawer for reasons other than cash payments.
     * @return $this
     */
    public function setCashPaidInMoney($cash_paid_in_money)
    {
        $this->container['cash_paid_in_money'] = $cash_paid_in_money;

        return $this;
    }

    /**
     * Gets cash_paid_out_money
     * @return \SquareConnect\Model\Money
     */
    public function getCashPaidOutMoney()
    {
        return $this->container['cash_paid_out_money'];
    }

    /**
     * Sets cash_paid_out_money
     * @param \SquareConnect\Model\Money $cash_paid_out_money The amount of money removed from the cash drawer for reasons other than cash refunds.
     * @return $this
     */
    public function setCashPaidOutMoney($cash_paid_out_money)
    {
        $this->container['cash_paid_out_money'] = $cash_paid_out_money;

        return $this;
    }

    /**
     * Gets expected_cash_money
     * @return \SquareConnect\Model\Money
     */
    public function getExpectedCashMoney()
    {
        return $this->container['expected_cash_money'];
    }

    /**
     * Sets expected_cash_money
     * @param \SquareConnect\Model\Money $expected_cash_money The amount of money that should be in the cash drawer at the end of the shift, based on the shift's other money amounts.
     * @return $this
     */
    public function setExpectedCashMoney($expected_cash_money)
    {
        $this->container['expected_cash_money'] = $expected_cash_money;

        return $this;
    }

    /**
     * Gets closed_cash_money
     * @return \SquareConnect\Model\Money
     */
    public function getClosedCashMoney()
    {
        return $this->container['closed_cash_money'];
    }

    /**
     * Sets closed_cash_money
     * @param \SquareConnect\Model\Money $closed_cash_money The amount of money found in the cash drawer at the end of the shift by an auditing employee.
     * @return $this
     */
    public function setClosedCashMoney($closed_cash_money)
    {
        $this->container['closed_cash_money'] = $closed_cash_money;

        return $this;
    }

    /**
     * Gets device
     * @return \SquareConnect\Model\Device
     */
    public function getDevice()
    {
        return $this->container['device'];
    }

    /**
     * Sets device
     * @param \SquareConnect\Model\Device $device The device running Square Register that was connected to the cash drawer.
     * @return $this
     */
    public function setDevice($device)
    {
        $this->container['device'] = $device;

        return $this;
    }

    /**
     * Gets events
     * @return \SquareConnect\Model\CashDrawerEvent[]
     */
    public function getEvents()
    {
        return $this->container['events'];
    }

    /**
     * Sets events
     * @param \SquareConnect\Model\CashDrawerEvent[] $events All of the events (payments, refunds, and so on) that involved the cash drawer during the shift.
     * @return $this
     */
    public function setEvents($events)
    {
        $this->container['events'] = $events;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\SquareConnect\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\SquareConnect\ObjectSerializer::sanitizeForSerialization($this));
    }
}



<?php
/**
 * Card
 *
 * PHP version 5
 *
 * @category Class
 * @package  SquareConnect
 * @author   Square Inc.
 * @license  Apache Licene v2 - http://www.apache.org/licenses/LICENSE-2.0
 * @link     https://squareup.com/developers
 */

/**
 * Square Connect API
 *
 * Client library for accessing the Square Connect APIs
 *
 * OpenAPI spec version: 3.0
 * Contact: developers@squareup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 *  Copyright 2016 Square, Inc.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace SquareConnect\Model;

use \ArrayAccess;

/**
 * Card Class Doc Comment
 *
 * @category    Class */
 // @description Represents a credit card.
/**
 * @package     SquareConnect
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Card implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Card';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'card_brand' => 'string',
        'last_4' => 'string',
        'exp_month' => 'int',
        'exp_year' => 'int',
        'cardholder_name' => 'string',
        'billing_address' => '\SquareConnect\Model\Address'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'card_brand' => 'card_brand',
        'last_4' => 'last_4',
        'exp_month' => 'exp_month',
        'exp_year' => 'exp_year',
        'cardholder_name' => 'cardholder_name',
        'billing_address' => 'billing_address'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'card_brand' => 'setCardBrand',
        'last_4' => 'setLast4',
        'exp_month' => 'setExpMonth',
        'exp_year' => 'setExpYear',
        'cardholder_name' => 'setCardholderName',
        'billing_address' => 'setBillingAddress'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'card_brand' => 'getCardBrand',
        'last_4' => 'getLast4',
        'exp_month' => 'getExpMonth',
        'exp_year' => 'getExpYear',
        'cardholder_name' => 'getCardholderName',
        'billing_address' => 'getBillingAddress'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const CARD_BRAND_OTHER_BRAND = 'OTHER_BRAND';
    const CARD_BRAND_VISA = 'VISA';
    const CARD_BRAND_MASTERCARD = 'MASTERCARD';
    const CARD_BRAND_AMERICAN_EXPRESS = 'AMERICAN_EXPRESS';
    const CARD_BRAND_DISCOVER = 'DISCOVER';
    const CARD_BRAND_DISCOVER_DINERS = 'DISCOVER_DINERS';
    const CARD_BRAND_JCB = 'JCB';
    const CARD_BRAND_CHINA_UNIONPAY = 'CHINA_UNIONPAY';
    const CARD_BRAND_SQUARE_GIFT_CARD = 'SQUARE_GIFT_CARD';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getCardBrandAllowableValues()
    {
        return [
            self::CARD_BRAND_OTHER_BRAND,
            self::CARD_BRAND_VISA,
            self::CARD_BRAND_MASTERCARD,
            self::CARD_BRAND_AMERICAN_EXPRESS,
            self::CARD_BRAND_DISCOVER,
            self::CARD_BRAND_DISCOVER_DINERS,
            self::CARD_BRAND_JCB,
            self::CARD_BRAND_CHINA_UNIONPAY,
            self::CARD_BRAND_SQUARE_GIFT_CARD,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['card_brand'] = isset($data['card_brand']) ? $data['card_brand'] : null;
        $this->container['last_4'] = isset($data['last_4']) ? $data['last_4'] : null;
        $this->container['exp_month'] = isset($data['exp_month']) ? $data['exp_month'] : null;
        $this->container['exp_year'] = isset($data['exp_year']) ? $data['exp_year'] : null;
        $this->container['cardholder_name'] = isset($data['cardholder_name']) ? $data['cardholder_name'] : null;
        $this->container['billing_address'] = isset($data['billing_address']) ? $data['billing_address'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        $allowed_values = ["OTHER_BRAND", "VISA", "MASTERCARD", "AMERICAN_EXPRESS", "DISCOVER", "DISCOVER_DINERS", "JCB", "CHINA_UNIONPAY", "SQUARE_GIFT_CARD"];
        if (!in_array($this->container['card_brand'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'card_brand', must be one of #{allowed_values}.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        $allowed_values = ["OTHER_BRAND", "VISA", "MASTERCARD", "AMERICAN_EXPRESS", "DISCOVER", "DISCOVER_DINERS", "JCB", "CHINA_UNIONPAY", "SQUARE_GIFT_CARD"];
        if (!in_array($this->container['card_brand'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets id
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param string $id The card's unique ID, if any.
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets card_brand
     * @return string
     */
    public function getCardBrand()
    {
        return $this->container['card_brand'];
    }

    /**
     * Sets card_brand
     * @param string $card_brand The card's brand (such as `VISA`).
     * @return $this
     */
    public function setCardBrand($card_brand)
    {
        $allowed_values = array('OTHER_BRAND', 'VISA', 'MASTERCARD', 'AMERICAN_EXPRESS', 'DISCOVER', 'DISCOVER_DINERS', 'JCB', 'CHINA_UNIONPAY', 'SQUARE_GIFT_CARD');
        if (!is_null($card_brand) && (!in_array($card_brand, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'card_brand', must be one of 'OTHER_BRAND', 'VISA', 'MASTERCARD', 'AMERICAN_EXPRESS', 'DISCOVER', 'DISCOVER_DINERS', 'JCB', 'CHINA_UNIONPAY', 'SQUARE_GIFT_CARD'");
        }
        $this->container['card_brand'] = $card_brand;

        return $this;
    }

    /**
     * Gets last_4
     * @return string
     */
    public function getLast4()
    {
        return $this->container['last_4'];
    }

    /**
     * Sets last_4
     * @param string $last_4 The last 4 digits of the card's number.
     * @return $this
     */
    public function setLast4($last_4)
    {
        $this->container['last_4'] = $last_4;

        return $this;
    }

    /**
     * Gets exp_month
     * @return int
     */
    public function getExpMonth()
    {
        return $this->container['exp_month'];
    }

    /**
     * Sets exp_month
     * @param int $exp_month The month of the card's expiration date, which must be between 1-12.
     * @return $this
     */
    public function setExpMonth($exp_month)
    {
        $this->container['exp_month'] = $exp_month;

        return $this;
    }

    /**
     * Gets exp_year
     * @return int
     */
    public function getExpYear()
    {
        return $this->container['exp_year'];
    }

    /**
     * Sets exp_year
     * @param int $exp_year The year of the card's expiration date, which must be a 4-digit year.
     * @return $this
     */
    public function setExpYear($exp_year)
    {
        $this->container['exp_year'] = $exp_year;

        return $this;
    }

    /**
     * Gets cardholder_name
     * @return string
     */
    public function getCardholderName()
    {
        return $this->container['cardholder_name'];
    }

    /**
     * Sets cardholder_name
     * @param string $cardholder_name The cardholder name for the card on file.
     * @return $this
     */
    public function setCardholderName($cardholder_name)
    {
        $this->container['cardholder_name'] = $cardholder_name;

        return $this;
    }

    /**
     * Gets billing_address
     * @return \SquareConnect\Model\Address
     */
    public function getBillingAddress()
    {
        return $this->container['billing_address'];
    }

    /**
     * Sets billing_address
     * @param \SquareConnect\Model\Address $billing_address The billing address for the card on file.
     * @return $this
     */
    public function setBillingAddress($billing_address)
    {
        $this->container['billing_address'] = $billing_address;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\SquareConnect\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\SquareConnect\ObjectSerializer::sanitizeForSerialization($this));
    }
}


